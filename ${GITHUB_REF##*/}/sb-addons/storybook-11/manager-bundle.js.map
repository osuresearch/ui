{
  "version": 3,
  "sources": ["global-externals:@storybook/addons", "global-externals:react", "global-externals:@storybook/theming", "../../../src/storybook/Theme.light.ts", "../../../.storybook/manager.tsx"],
  "sourcesContent": ["export default __STORYBOOKADDONS__;\nconst { addons, types, mockChannel } = __STORYBOOKADDONS__;\nexport { addons, types, mockChannel };", "export default __REACT__;\nconst { Children, Component, Fragment, Profiler, PureComponent, StrictMode, Suspense, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, cloneElement, createContext, createElement, createFactory, createRef, forwardRef, isValidElement, lazy, memo, useCallback, useContext, useDebugValue, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState, version } = __REACT__;\nexport { Children, Component, Fragment, Profiler, PureComponent, StrictMode, Suspense, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, cloneElement, createContext, createElement, createFactory, createRef, forwardRef, isValidElement, lazy, memo, useCallback, useContext, useDebugValue, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState, version };", "export default __STORYBOOKTHEMING__;\nconst { CacheProvider, ClassNames, Global, ThemeProvider, background, color, convert, create, createCache, createGlobal, createReset, css, darken, ensure, ignoreSsrWarning, isPropValid, jsx, keyframes, lighten, styled, themes, typography, useTheme, withTheme } = __STORYBOOKTHEMING__;\nexport { CacheProvider, ClassNames, Global, ThemeProvider, background, color, convert, create, createCache, createGlobal, createReset, css, darken, ensure, ignoreSsrWarning, isPropValid, jsx, keyframes, lighten, styled, themes, typography, useTheme, withTheme };", "\nimport { create } from '@storybook/theming';\n\nexport default create({\n  base: 'light',\n\n  colorPrimary: '#26686d',\n\n  // Secondary drives link colors, input outlines, hover color for buttons,\n  // active underline colors,\n  colorSecondary: '#ba0c2f', // scarlet, or teal is good #26686d\n\n  // UI\n  appBg: '#ffffff', // f6f7f8 gray-tint-90\n  appContentBg: 'transparent',\n  appBorderRadius: 0,\n\n  // Typography\n  fontBase: 'Nunito Sans, HelveticaNeue, Helvetica, Arial, serif',\n  fontCode: 'monospace',\n\n  // Text colors\n  textColor: '#141517', // black\n  textInverseColor: 'rgba(255,255,255,0.9)',\n\n  // Toolbar default and active colors\n  barTextColor: '#212325',\n  barSelectedColor: '#ba0c2f', // scarlet\n  barBg: 'transparent',\n\n  // Form colors\n  inputBg: 'white',\n  inputBorder: '#eff1f2', // gray-tint-80\n  inputTextColor: '#141517', // black\n  inputBorderRadius: 0,\n\n  brandTitle: 'Research UI',\n  brandUrl: 'https://github.com/osuresearch/ui',\n});\n", "import { addons } from '@storybook/addons';\n\nimport React from 'react';\n\nimport dark from '../src/storybook/Theme.dark';\nimport light from '../src/storybook/Theme.light';\n\naddons.setConfig({\n  // isFullscreen: false,\n  // showNav: true,\n  // showPanel: true,\n  // panelPosition: 'bottom',\n  enableShortcuts: false,\n  theme: light,\n  // showToolbar: false,\n  // theme: undefined,\n  // selectedPanel: undefined,\n  // initialActive: 'sidebar',\n  sidebar: {\n    // showRoots: false,\n    collapsedRoots: [\n      'components',\n      'buttons',\n      'hooks',\n      'utilities',\n      'dialogs',\n      'forms',\n      'bux-stuff',\n      'ohio-state',\n      'unstyled',\n      'internal',\n      'contributing',\n    ],\n    renderLabel: (item) => {\n      // not super useful info. I want the meta...\n      // TODO: No inline hacking\n      // type: story, root, component\n      // parent: components, depth: 1\n      // isLeaf, isRoot, isComponent, renderLabel\n      return <div className={`rui-link--${item.type}`}>{item.name}</div>;\n    },\n  },\n  // toolbar: {\n  //   title: { hidden: true },\n  //   zoom: { hidden: true },\n  //   eject: { hidden: true },\n  //   copy: { hidden: true },\n  //   fullscreen: { hidden: true },\n  // },\n});\n"],
  "mappings": ";AAAA,IAAOA,EAAQ,oBACT,CAAE,OAAAC,EAAQ,MAAAC,EAAO,YAAAC,CAAY,EAAI,oBCDvC,IAAOC,EAAQ,UACT,CAAE,SAAAC,EAAU,UAAAC,EAAW,SAAAC,EAAU,SAAAC,EAAU,cAAAC,EAAe,WAAAC,EAAY,SAAAC,EAAU,mDAAAC,EAAoD,aAAAC,EAAc,cAAAC,EAAe,cAAAC,EAAe,cAAAC,EAAe,UAAAC,EAAW,WAAAC,EAAY,eAAAC,EAAgB,KAAAC,EAAM,KAAAC,EAAM,YAAAC,EAAa,WAAAC,EAAY,cAAAC,EAAe,UAAAC,EAAW,oBAAAC,EAAqB,gBAAAC,EAAiB,QAAAC,EAAS,WAAAC,EAAY,OAAAC,EAAQ,SAAAC,EAAU,QAAAC,CAAQ,EAAI,UCDpY,IAAOC,EAAQ,qBACT,CAAE,cAAAC,GAAe,WAAAC,GAAY,OAAAC,GAAQ,cAAAC,GAAe,WAAAC,GAAY,MAAAC,GAAO,QAAAC,GAAS,OAAAC,EAAQ,YAAAC,GAAa,aAAAC,GAAc,YAAAC,GAAa,IAAAC,GAAK,OAAAC,GAAQ,OAAAC,GAAQ,iBAAAC,GAAkB,YAAAC,GAAa,IAAAC,GAAK,UAAAC,GAAW,QAAAC,GAAS,OAAAC,GAAQ,OAAAC,GAAQ,WAAAC,GAAY,SAAAC,GAAU,UAAAC,EAAU,EAAI,qBCEvQ,IAAOC,EAAQC,EAAO,CACpB,KAAM,QAEN,aAAc,UAId,eAAgB,UAGhB,MAAO,UACP,aAAc,cACd,gBAAiB,EAGjB,SAAU,sDACV,SAAU,YAGV,UAAW,UACX,iBAAkB,wBAGlB,aAAc,UACd,iBAAkB,UAClB,MAAO,cAGP,QAAS,QACT,YAAa,UACb,eAAgB,UAChB,kBAAmB,EAEnB,WAAY,cACZ,SAAU,mCACZ,CAAC,EC/BDC,EAAO,UAAU,CAKf,gBAAiB,GACjB,MAAOC,EAKP,QAAS,CAEP,eAAgB,CACd,aACA,UACA,QACA,YACA,UACA,QACA,YACA,aACA,WACA,WACA,cACF,EACA,YAAcC,GAMLC,EAAA,cAAC,OAAI,UAAW,aAAaD,EAAK,IAAI,IAAKA,EAAK,IAAK,CAEhE,CAQF,CAAC",
  "names": ["addons_default", "addons", "types", "mockChannel", "react_default", "Children", "Component", "Fragment", "Profiler", "PureComponent", "StrictMode", "Suspense", "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", "cloneElement", "createContext", "createElement", "createFactory", "createRef", "forwardRef", "isValidElement", "lazy", "memo", "useCallback", "useContext", "useDebugValue", "useEffect", "useImperativeHandle", "useLayoutEffect", "useMemo", "useReducer", "useRef", "useState", "version", "theming_default", "CacheProvider", "ClassNames", "Global", "ThemeProvider", "background", "color", "convert", "create", "createCache", "createGlobal", "createReset", "css", "darken", "ensure", "ignoreSsrWarning", "isPropValid", "jsx", "keyframes", "lighten", "styled", "themes", "typography", "useTheme", "withTheme", "Theme_light_default", "create", "addons", "Theme_light_default", "item", "react_default"]
}
