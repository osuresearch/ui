"use strict";(self.webpackChunk_osuresearch_ui=self.webpackChunk_osuresearch_ui||[]).push([[8033],{"./src/components/Page/Page.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Page_stories});var react=__webpack_require__("./node_modules/react/index.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function Page({title,className,id,focusRef,children}){return(0,react.useEffect)((()=>{let moveFocusTimer=0;if(focusRef?.current)focusRef.current.tabIndex||(focusRef.current.tabIndex=-1),moveFocusTimer=window.setTimeout((()=>{focusRef?.current?.focus()}),250);else{const a11yPageRoot=document.getElementById("a11y-page-root"),updateAndFocus=root=>{root.innerText=`${title}, Start of web content`,root.focus()};if(a11yPageRoot)updateAndFocus(a11yPageRoot);else{const newA11yPageRoot=document.createElement("div");newA11yPageRoot.id="a11y-page-root",newA11yPageRoot.tabIndex=-1,newA11yPageRoot.style.position="absolute",newA11yPageRoot.style.width="1px",newA11yPageRoot.style.height="1px",newA11yPageRoot.style.border="0",newA11yPageRoot.style.margin="-1px",newA11yPageRoot.style.overflow="hidden",document.body.insertAdjacentElement("afterbegin",newA11yPageRoot),updateAndFocus(newA11yPageRoot)}}return()=>clearTimeout(moveFocusTimer)}),[]),(0,react.useEffect)((()=>{document.title=title}),[title]),(0,jsx_runtime.jsx)("div",{className,id,children})}Page.displayName="Page";try{Page.displayName="Page",Page.__docgenInfo={description:'Page container for Single Page Applications.\n\nIncludes necessary accessibility enhancements for proper screen reader and keyboard functionality.\n\nEvery page in the app MUST be wrapped in this component unless it contains only one (1) route, which is rare.\n\n## Focus Management\n\nBy default, when the `<Page>` component mounts, it will move the keyboard focus to a hidden container with\nthe `<Page>` title and helper text for screen reader users. Keyboard users can then navigate the page\nstarting at the top as if they were navigating a new page on a multipage website.\n\nIn some use cases, the default behavior will result in a poorer user experience. For example,\nthe ideal user experience for a multipage form is for the focus to move directly to the new content\nafter the user presses the next or previous button.\n\nTo achieve this behavior, the `<Page>` component accepts an optional `focusRef` prop.\n\n## Implementation Options\n\nThe preferred method is to use `<Page>` as the container of a component:\n```\nfunction Workspace() {\n return (\n   <Page\n     title="Workspace - My App | Office of Research"\n     id="workspace"\n     className="one-column-page"\n   >\n     Workspace content...\n   </Page>\n );\n}\n```\n\nIf you are retrofitting an older application using React Router, the simplest way to implement\nthis component is to wrap each Route element in App.tsx with a `<Page>`:\n```\n <main id="content">\n   <Routes>\n     <Route path="/" element={\n       <Page title="My App | Office of Research">\n         <Workspace />\n       </Page>\n     } />\n     <Route element={\n       <Page title="Page Not Found - My App | Office of Research">\n         <NotFound />\n       </Page>\n     } />\n   </Routes>\n</main>\n```',displayName:"Page",props:{title:{defaultValue:null,description:"The title of the page - this will update `document.title` and be announced to screen reader users when this component is mounted",name:"title",required:!0,type:{name:"string"}},className:{defaultValue:null,description:"Optional className on the page container",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"Optional id on the page container",name:"id",required:!1,type:{name:"string"}},focusRef:{defaultValue:null,description:"The element that will receive focus when the page is mounted (optional).",name:"focusRef",required:!1,type:{name:"RefObject<HTMLElement>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Page/Page.tsx#Page"]={docgenInfo:Page.__docgenInfo,name:"Page",path:"src/components/Page/Page.tsx#Page"})}catch(__react_docgen_typescript_loader_error){}const Page_stories={title:"Layout/Page",component:Page,argTypes:{}},Example={args:{}};Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:"{\n  args: {}\n} satisfies Story",...Example.parameters?.docs?.source}}};const __namedExportsOrder=["Example"]}}]);